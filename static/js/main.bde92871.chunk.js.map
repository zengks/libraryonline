{"version":3,"sources":["searchBar.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","items","title","hasError","bookFound","handleChange","bind","handleSubmit","handleAPI","api","this","console","log","axios","get","then","res","data","setState","catch","err","e","target","value","preventDefault","className","onSubmit","type","onChange","placeholder","map","item","image","imageLink","volumeInfo","imageLinks","previewLink","src","alt","thumbnail","key","id","href","categories","description","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mSA0HeA,E,kDAnHX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,MAAO,kBACPC,UAAU,EACVC,WAAW,GAGf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAXH,E,6CAchB,WAAa,IAAD,OACNG,EAlBA,iDAkBYC,KAAKV,MAAME,MAC3BS,QAAQC,IAAIH,GACII,IAAMC,IAAIL,GAEzBM,MAAK,SAACC,GACH,IAAMf,EAAQe,EAAIC,KAAKhB,MACpBA,EACC,EAAKiB,SAAS,CAACjB,UAEf,EAAKiB,SAAS,CAACd,WAAW,OAKjCe,OAAM,SAACC,GACNT,QAAQC,IAAIQ,GACZ,EAAKF,SAAS,CAACf,UAAU,S,+BAI7B,WACEO,KAAKF,c,0BAGP,SAAaa,GACXX,KAAKQ,SAAS,CAAChB,MAAOmB,EAAEC,OAAOC,QAC/BF,EAAEG,mB,0BAGJ,SAAaH,GACXX,KAAKF,YACLa,EAAEG,mB,oBAGJ,WAEE,OACI,yBAAKC,UAAU,OACX,0BAAMC,SAAUhB,KAAKH,cACjB,2BAAOoB,KAAK,OAAOC,SAAUlB,KAAKL,aAAcwB,YAAc,qBAC9D,4BAAQF,KAAK,UAAb,WAGHjB,KAAKV,MAAMG,UACR,8CAGHO,KAAKV,MAAMI,UACZ,yBAAKqB,UAAU,QACX,4BACKf,KAAKV,MAAMC,MAAM6B,KAAI,SAAAC,GACd,IAAIC,EACAC,EAAYF,EAAKG,WAAWC,WAC5BC,EAAcL,EAAKG,WAAWE,YAOlC,OALIJ,EADoB,oBAAdC,EACE,yBAAKI,IAAI,GAAGC,IAAKP,EAAKG,WAAWhC,QAEjC,yBAAKmC,IAAKN,EAAKG,WAAWC,WAAWI,UAAWD,IAAKP,EAAKG,WAAWhC,QAI7E,wBAAIuB,UAAU,WAAWe,IAAKT,EAAKU,IAC/B,yBAAKhB,UAAU,aACVO,GAGL,yBAAKP,UAAU,cACX,yBAAKA,UAAU,aACX,uBAAGiB,KAAON,EAAad,OAAO,UAAUS,EAAKG,WAAWhC,QAG5D,yBAAKuB,UAAU,YACX,4BACI,4BAAKM,EAAKG,WAAWS,cAI7B,yBAAKlB,UAAU,WACVM,EAAKG,WAAWU,oBAW7C,qBAAwBlC,KAAKV,MAAME,W,GAzG/B2C,aCeTC,G,kKAXb,WACE,OACE,yBAAKrB,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWvB,MAAM,U,GATP2C,cCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.bde92871.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst url = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            title: \"Michael Jackson\",\r\n            hasError: false,\r\n            bookFound: true\r\n\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleAPI = this.handleAPI.bind(this);\r\n      }\r\n\r\n      handleAPI() {\r\n        let api = url + this.state.title;\r\n        console.log(api)\r\n        const promise = axios.get(api);\r\n        promise\r\n        .then((res) => {\r\n            const items = res.data.items;\r\n            if(items){\r\n                this.setState({items});\r\n            }else{\r\n                this.setState({bookFound: false});\r\n            }\r\n            \r\n        })\r\n\r\n        .catch((err) => {\r\n          console.log(err);\r\n          this.setState({hasError: true});\r\n        })\r\n      }\r\n      \r\n      componentDidMount() {\r\n        this.handleAPI();\r\n      }\r\n\r\n      handleChange(e){\r\n        this.setState({title: e.target.value});\r\n        e.preventDefault();\r\n      }\r\n\r\n      handleSubmit(e){\r\n        this.handleAPI();\r\n        e.preventDefault();\r\n      }\r\n\r\n      render(){\r\n          \r\n        return(\r\n            <div className=\"App\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" onChange={this.handleChange} placeholder = \"Eg. Harry Potter\"></input>\r\n                    <button type=\"submit\">Search</button>\r\n                </form>\r\n\r\n                {this.state.hasError && (\r\n                    <h2>Request Failed</h2>\r\n                )}\r\n\r\n                {this.state.bookFound ? (\r\n                <div className=\"list\">\r\n                    <ul>\r\n                        {this.state.items.map(item => {\r\n                                let image;\r\n                                let imageLink = item.volumeInfo.imageLinks;\r\n                                let previewLink = item.volumeInfo.previewLink;\r\n                                if(typeof(imageLink) == 'undefined') {\r\n                                    image = <img src='' alt={item.volumeInfo.title}></img>;\r\n                                }else{\r\n                                    image = <img src={item.volumeInfo.imageLinks.thumbnail} alt={item.volumeInfo.title}></img>;\r\n                                }\r\n                                \r\n                                return(\r\n                                    <li className=\"bookList\" key={item.id}>\r\n                                        <div className=\"bookImage\">\r\n                                            {image}\r\n                                        </div>\r\n\r\n                                        <div className=\"bookDetail\">\r\n                                            <div className=\"bookTitle\">\r\n                                                <a href= {previewLink} target=\"_blank\">{item.volumeInfo.title}</a>\r\n                                            </div>\r\n\r\n                                            <div className=\"bookCate\">\r\n                                                <ul>\r\n                                                    <li>{item.volumeInfo.categories}</li>\r\n                                                </ul>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"bookDes\">\r\n                                                {item.volumeInfo.description}\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </li>\r\n                                    \r\n                                )\r\n                            })}\r\n                    </ul>\r\n                        \r\n                </div>\r\n                ) : \"No Books Found for\" + (this.state.title)}\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\n\r\nSearchBar.propTypes = {\r\n    title: PropTypes.array,\r\n  };\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\nimport SearchBar from './searchBar'\nimport './App.css';\n\n\nclass App extends Component{\n  // constructor(){\n  //   super();\n  // }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <h1>BookStore</h1>\n        <SearchBar title=\"\">\n        </SearchBar>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}